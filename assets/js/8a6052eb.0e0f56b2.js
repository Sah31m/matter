"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[63],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>h});var r=n(67294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=r.createContext({}),p=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},u=function(e){var t=p(e.components);return r.createElement(s.Provider,{value:t},e.children)},c="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,s=e.parentName,u=i(e,["components","mdxType","originalType","parentName"]),c=p(n),d=a,h=c["".concat(s,".").concat(d)]||c[d]||m[d]||o;return n?r.createElement(h,l(l({ref:t},u),{},{components:n})):r.createElement(h,l({ref:t},u))}));function h(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,l=new Array(o);l[0]=d;var i={};for(var s in t)hasOwnProperty.call(t,s)&&(i[s]=t[s]);i.originalType=e,i[c]="string"==typeof e?e:a,l[1]=i;for(var p=2;p<o;p++)l[p]=n[p];return r.createElement.apply(null,l)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},47282:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>l,default:()=>m,frontMatter:()=>o,metadata:()=>i,toc:()=>p});var r=n(87462),a=(n(67294),n(3905));const o={sidebar_position:3},l="Getting Started",i={unversionedId:"GettingStarted",id:"GettingStarted",title:"Getting Started",description:"Here's how you scaffold a project with Matter.",source:"@site/docs/GettingStarted.md",sourceDirName:".",slug:"/GettingStarted",permalink:"/matter/docs/GettingStarted",draft:!1,editUrl:"https://github.com/evaera/matter/edit/main/docs/GettingStarted.md",tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3},sidebar:"defaultSidebar",previous:{title:"Installation",permalink:"/matter/docs/Installation"},next:{title:"Why ECS",permalink:"/matter/docs/WhyECS"}},s={},p=[{value:"Next steps",id:"next-steps",level:2}],u={toc:p},c="wrapper";function m(e){let{components:t,...n}=e;return(0,a.kt)(c,(0,r.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"getting-started"},"Getting Started"),(0,a.kt)("p",null,"Here's how you scaffold a project with Matter."),(0,a.kt)("p",null,"First, import Matter at the top of your file. Then, create your ",(0,a.kt)("a",{parentName:"p",href:"/api/World"},(0,a.kt)("inlineCode",{parentName:"a"},"World"))," and your ",(0,a.kt)("a",{parentName:"p",href:"/api/Loop"},(0,a.kt)("inlineCode",{parentName:"a"},"Loop")),"."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-lua",metastring:'title="init.server.lua"',title:'"init.server.lua"'},"local Matter = require(ReplicatedStorage.Matter)\n\nlocal world = Matter.World.new()\n\nlocal loop = Matter.Loop.new(world) -- This makes Loop pass the world to all your systems.\n")),(0,a.kt)("p",null,"Then, we should collect all of your systems and schedule them. Assuming they're in a ",(0,a.kt)("inlineCode",{parentName:"p"},"systems")," folder inside this script:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-lua",metastring:'title="init.server.lua"',title:'"init.server.lua"'},'local systems = {}\nfor _, child in ipairs(script.systems:GetChildren()) do\n    if child:IsA("ModuleScript") then\n        table.insert(systems, require(child))\n    end\nend\n\nloop:scheduleSystems(systems)\n')),(0,a.kt)("p",null,"Then, simply start the loop."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-lua",metastring:'title="init.server.lua"',title:'"init.server.lua"'},"loop:begin({\n    default = RunService.Heartbeat\n})\n")),(0,a.kt)("p",null,"Now your systems would run every heartbeat, if you had any. Let's make some."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-lua",metastring:'title="systems/myFirstSystem.lua"',title:'"systems/myFirstSystem.lua"'},'local function myFirstSystem()\n    print("Hello world!")\nend\n\nreturn myFirstSystem\n')),(0,a.kt)("p",null,"Now we're printing something 60 times per second. We should probably do something actually interesting instead."),(0,a.kt)("p",null,"Let's create a couple components."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-lua",metastring:'title="components.lua"',title:'"components.lua"'},"local Matter = require(ReplicatedStorage.Matter)\n\nreturn {\n    Health = Matter.component(),\n    Poison = Matter.component(),\n}\n")),(0,a.kt)("p",null,"Let's make a system that removes 0.1 health every frame from things that are poisoned."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-lua",metastring:'title="systems/poisonHurts.lua"',title:'"systems/poisonHurts.lua"'},"local Components = require(script.Parent.components)\nlocal Health = Components.Health\nlocal Poison = Components.Poison\n\nlocal function poisonHurts(world)\n    for id, health in world:query(Health, Poison) do\n        world:insert(id, health:patch({\n            value = health.value - 0.1\n        }))\n    end\nend\n")),(0,a.kt)("p",null,"We make use of the ",(0,a.kt)("a",{parentName:"p",href:"/api/Component#patch"},(0,a.kt)("inlineCode",{parentName:"a"},"Component:patch"))," function, which returns a new component with an updated\nvalue, so we don't have to mutate the existing component."),(0,a.kt)("p",null,"If you want to check out a more complex, real game example, check out the ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/evaera/matter/tree/main/example/"},(0,a.kt)("inlineCode",{parentName:"a"},"/example")," directory in the matter repo"),"."),(0,a.kt)("h2",{id:"next-steps"},"Next steps"),(0,a.kt)("p",null,"You should dive in to the ",(0,a.kt)("a",{parentName:"p",href:"/api/Matter"},"API reference"),"! The Matter API is simple and documented in detail."),(0,a.kt)("p",null,"A more detailed usage guide will be written eventually, offering an introduction to ECS architecture and going over more of Matter's design philosophy."))}m.isMDXComponent=!0}}]);